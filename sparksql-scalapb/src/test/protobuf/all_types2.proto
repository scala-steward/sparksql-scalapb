syntax = "proto2";

package scalapb.spark.test;

message Int32Test {
  optional int32 optional_int32 = 1;
  optional uint32 optional_uint32 = 2;
  optional sint32 optional_sint32 = 3;
  optional fixed32 optional_fixed32 = 4;
  optional sfixed32 optional_sfixed32 = 5;

  required int32 required_int32 = 6;
  required uint32 required_uint32 = 7;
  required sint32 required_sint32 = 8;
  required fixed32 required_fixed32 = 9;
  required sfixed32 required_sfixed32 = 10;

  repeated int32 repeated_int32 = 11;
  repeated uint32 repeated_uint32 = 12;
  repeated sint32 repeated_sint32 = 13;
  repeated fixed32 repeated_fixed32 = 14;
  repeated sfixed32 repeated_sfixed32 = 15;
}

message Int64Test {
  optional int64 optional_int64 = 1;
  optional uint64 optional_uint64 = 2;
  optional sint64 optional_sint64 = 3;
  optional fixed64 optional_fixed64 = 4;
  optional sfixed64 optional_sfixed64 = 5;

  required int64 required_int64 = 6;
  required uint64 required_uint64 = 7;
  required sint64 required_sint64 = 8;
  required fixed64 required_fixed64 = 9;
  required sfixed64 required_sfixed64 = 10;

  repeated int64 repeated_int64 = 11;
  repeated uint64 repeated_uint64 = 12;
  repeated sint64 repeated_sint64 = 13;
  repeated fixed64 repeated_fixed64 = 14;
  repeated sfixed64 repeated_sfixed64 = 15;
}

message DoubleTest {
  optional double optional_double = 1;
  required double required_double = 2;
  repeated double repeated_double = 3;
}

message FloatTest {
  optional float optional_float = 1;
  required float required_float = 2;
  repeated float repeated_float = 3;
}

message StringTest {
  optional string optional_string = 1;
  required string required_string = 2;
  repeated string repeated_string = 3;
}

message BoolTest {
  optional bool optional_bool = 1;
  required bool required_bool = 2;
  repeated bool repeated_bool = 3;
}

message BytesTest {
  optional bytes optional_bytes = 1;
  required bytes required_bytes = 2;
  repeated bytes repeated_bytes = 3;
}

enum TopLevelEnum {
  FOREIGN_FOO = 4;
  FOREIGN_BAR = 5;
  FOREIGN_BAZ = 6;
}

message EnumTest {
  enum NestedEnum {
    FOO = 1;
    BAR = 2;
    BAZ = 3;
    NEG = -1; // Intentionally negative.
  }
  optional NestedEnum optional_nested_enum = 1;
  required NestedEnum required_nested_enum = 2;
  repeated NestedEnum repeated_nested_enum = 3;
  optional TopLevelEnum optional_top_level_enum = 4;
  required TopLevelEnum required_top_level_enum = 5;
  repeated TopLevelEnum repeated_top_level_enum = 6;
}

message TopLevelMessage {
  optional int32 c = 1;
}

message MessageTest {
  message NestedMessage {
    optional int32 bb = 1;
  }
  optional NestedMessage optional_nested_message = 1;
  required NestedMessage required_nested_message = 2;
  repeated NestedMessage repeated_nested_message = 3;

  optional TopLevelMessage optional_top_level_message = 4;
  required TopLevelMessage required_top_level_message = 5;
  repeated TopLevelMessage repeated_top_level_message = 6;
}

message OneofTest {
  oneof oneof_field {
    uint32 oneof_uint32 = 111;
    MessageTest.NestedMessage oneof_nested_message = 112;
    string oneof_string = 113;
    bytes oneof_bytes = 114;
  }
}

message Level1 {
  message Level2 {
    message Level3 {
      optional bytes c = 2;
    }
    optional Level3 level3 = 1;
    optional int32 b = 2;
  }
  optional Level2 level2 = 1;
  optional string a = 2;
}
