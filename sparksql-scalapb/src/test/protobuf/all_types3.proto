syntax = "proto3";

package scalapb.spark.test3;

import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "scalapb/scalapb.proto";

option (scalapb.options) = {
  preserve_unknown_fields: false
};

message Int32Test {
  int32 optional_int32 = 1;
  uint32 optional_uint32 = 2;
  sint32 optional_sint32 = 3;
  fixed32 optional_fixed32 = 4;
  sfixed32 optional_sfixed32 = 5;

  repeated int32 repeated_int32 = 11;
  repeated uint32 repeated_uint32 = 12;
  repeated sint32 repeated_sint32 = 13;
  repeated fixed32 repeated_fixed32 = 14;
  repeated sfixed32 repeated_sfixed32 = 15;
}

message Int64Test {
  int64 optional_int64 = 1;
  uint64 optional_uint64 = 2;
  sint64 optional_sint64 = 3;
  fixed64 optional_fixed64 = 4;
  sfixed64 optional_sfixed64 = 5;

  repeated int64 repeated_int64 = 11;
  repeated uint64 repeated_uint64 = 12;
  repeated sint64 repeated_sint64 = 13;
  repeated fixed64 repeated_fixed64 = 14;
  repeated sfixed64 repeated_sfixed64 = 15;
}

message DoubleTest {
  double optional_double = 1;
  repeated double repeated_double = 3;
}

message FloatTest {
  float optional_float = 1;
  repeated float repeated_float = 3;
}

message StringTest {
  string optional_string = 1;
  repeated string repeated_string = 3;
}

message BoolTest {
  bool optional_bool = 1;
  repeated bool repeated_bool = 3;
}

message BytesTest {
  bytes optional_bytes = 1;
  repeated bytes repeated_bytes = 3;
}

enum TopLevelEnum {
  EMPTY = 0;
  FOREIGN_FOO = 4;
  FOREIGN_BAR = 5;
  FOREIGN_BAZ = 6;
}

message EnumTest {
  enum NestedEnum {
    UNKNOWN = 0;
    FOO = 1;
    BAR = 2;
    BAZ = 3;
    NEG = -1; // Intentionally negative.
  }
  NestedEnum optional_nested_enum = 1;
  repeated NestedEnum repeated_nested_enum = 3;
  TopLevelEnum optional_top_level_enum = 4;
  repeated TopLevelEnum repeated_top_level_enum = 6;
}

message TopLevelMessage {
  int32 c = 1;
}

message MessageTest {
  message NestedMessage {
    int32 bb = 1;
  }
  NestedMessage optional_nested_message = 1;
  repeated NestedMessage repeated_nested_message = 3;

  TopLevelMessage optional_top_level_message = 4;
  repeated TopLevelMessage repeated_top_level_message = 6;
}

message OneofTest {
  oneof oneof_field {
    uint32 oneof_uint32 = 111;
    MessageTest.NestedMessage oneof_nested_message = 112;
    string oneof_string = 113;
    bytes oneof_bytes = 114;
  }
}

message Level1 {
  message Level2 {
    message Level3 {
      bytes c = 2;
    }
    Level3 level3 = 1;
    int32 b = 2;
  }
  Level2 level2 = 1;
  string a = 2;
}

message AnyTest {
  google.protobuf.Any any = 1;
}

message WrappersTest {
  google.protobuf.BoolValue bool_value = 1;
  google.protobuf.BytesValue bytes_value = 2;
  google.protobuf.DoubleValue double_value = 3;
  google.protobuf.FloatValue float_value = 4;
  google.protobuf.Int32Value int32_value = 5;
  google.protobuf.Int64Value int64_value = 6;
  google.protobuf.StringValue string_value = 7;
  google.protobuf.UInt32Value uint32_value = 8;
  google.protobuf.UInt64Value uint64_Value = 9;

  repeated google.protobuf.BoolValue bool_repeated_Value = 11;
  repeated google.protobuf.BytesValue bytes_repeated_Value = 12;
  repeated google.protobuf.DoubleValue double_repeated_Value = 13;
  repeated google.protobuf.FloatValue float_repeated_Value = 14;
  repeated google.protobuf.Int32Value int32_repeated_Value = 15;
  repeated google.protobuf.Int64Value int64_repeated_Value = 16;
  repeated google.protobuf.StringValue string_repeated_Value = 17;
  repeated google.protobuf.UInt32Value uint32_repeated_Value = 18;
  repeated google.protobuf.UInt64Value uint64_repeated_Value = 19;
}

message WellKnownTypes {
  google.protobuf.Timestamp timestamp = 1;
  google.protobuf.Duration  duration = 2;
  repeated google.protobuf.Timestamp timestamps = 3;
  repeated google.protobuf.Duration durations = 4;
}

message MapTypes {
  map<int32, bool> int32_to_bool = 1;
  map<int32, bytes> int32_to_bytes = 2;
  map<int32, double> int32_to_double = 3;
  map<int32, float> int32_to_float = 4;
  map<int32, int32> int32_to_int32 = 5;
  map<int32, int64> int32_to_int64 = 6;
  map<int32, string> int32_to_string = 7;
  map<string, int32> string_to_int32 = 8;
  map<int32, TopLevelMessage> int32_to_message = 9;
  map<int32, TopLevelEnum> int32_to_enum = 10;
}